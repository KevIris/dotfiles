# at work or at home, change file opening program
COMPUTER_NAME=$(uname -n)

function open_this_folder {
  if [ "$COMPUTER_NAME" = "horsey-horserson" ]; then
    dolphin $1 &
    # elif windows /mnt/c/Windows/explorer.exe FOLDER
  else
    echo "check open_this_folder() in .zshrc; $COMPUTER_NAME is not recognised"
  fi
}

# x="c:\Users\Kevin\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs\home"
# explorer.exe $x

# Just so tired of that extra keypress
function exiter {
  exit echo
}

# function open_in_windows {
#   MY_UBUNTU_FS="C:\Users\kevin\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79r hkp1fndgsc\LocalState\rootfs"
#   THIS_DIRECTORY=$(pwd) | sed 's/\//\\/g'
#   explorer.exe $MY_UBUNTU_FS\$THIS_DIRECTORY
# }
# # explorer.exe "C:\Users\kevin\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79r hkp1fndgsc\LocalState\rootfs\home"
# echo $(pwd) | sed 's/\//\\/g'

# open recent files
function open_last_git_commits_and_most_recent_directory {
  cd $(git rev-parse --show-toplevel)
  vim $(grf)
}

# git commit / add / push in one go with error handling
function git_add_commit_push {
  INPUT=$1

  while true; do
    case $INPUT in
      "") echo ${red_with_blue}Needs a commit message, exiting${default}; break;;
    esac

    echo ${magenta_with_yellow}These files were affected: ${default}:

    echo $(git status -s)

    read yesno"?Is that ok? Yes or no?"
    case "$yesno" in
      [Yy]* ) cd $(git rev-parse --show-toplevel) &&
        git add . &&
        git commit -m \"$1\" &&
        git push &&
        cd -; break;;

    [Nn]* ) break;;
    * ) echo "The question was yes or no, dickface"
  esac
done
}

# TODO - need to figure out traps for both of these
# run server as background process and ignore output from both
function run_hoglet {
  cd ~/hoglet
  setopt LOCAL_OPTIONS NO_NOTIFY NO_MONITOR
  sh scripts/start-server.sh &
  cd ~/hoglet/hoglet-client
  npm start &
  echo 'hoglet - client / backend servers started'
  cd ~/hoglet/hoglet-client/src
}

# self explanatory name
function mkdir_and_cd {
  INPUT=$1
  mkdir $1 && cd $1
}

# go down n folders; go down one if noe value given
function down_n_folder {
  if [ -n "$1" ]; then
    for n in {1..$1}
    do
      cd ../
    done
  else
    cd ../
  fi
}

# change directory / store last directory
function cd_and_chill {
  \cd $1
  echo $(pwd) > ~/.last_dir
}

# powerline bits...
function powerline_precmd() {
  PS1="$(powerline-shell --shell zsh $?)"
}

function install_powerline_precmd() {
  for s in "${precmd_functions[@]}"; do
    if [ "$s" = "powerline_precmd" ]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}

if [ "$TERM" != "linux" ]; then
  install_powerline_precmd
fi
